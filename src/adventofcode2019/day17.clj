(ns adventofcode2019.day17
  (:require [adventofcode2019.intcode :refer [->core run]]
            [clojure.string :as str]
            [ubergraph.core :as uber]
            [ubergraph.alg :as alg]))

(def program (slurp "resources/day17.txt"))

(defn ->grid
  [s]
  (let [lines (str/split-lines s)]
    (->> (for [[line y] (map vector lines (range))
               [cell x] (map vector line (range))]
           [[x y] cell])
         (into {}))))

(defn intersection?
  [grid [x y]]
  (and (= \# (grid [x y]))
       (= \# (grid [(dec x) y]))
       (= \# (grid [(inc x) y]))
       (= \# (grid [x (dec y)]))
       (= \# (grid [x (inc y)]))))

(defn part1
  []
  (let [grid
          (->> (:output (run (->core program))) (map char) (apply str) ->grid)]
    (->> (filter (partial intersection? grid) (keys grid))
         (map (fn [[x y]] (println [x y]) (* x y)))
         (apply +))))

;;; unused
(defn ->graph
  [grid]
  (->> grid
       (filter (comp (partial = \#) second))
       (mapcat (fn [[[x y]]] (vector [[x y] [(inc x) y]] [[x y] [x (inc y)]])))
       (filter (comp (partial = \#) grid second))
       (apply uber/graph)))

(defn part2
  []
  (let
    [input
       (mapv int
         "A,B,A,C,A,B,C,B,C,A\nL,12,R,4,R,4,L,6\nL,12,R,4,R,4,R,12\nL,10,L,6,R,4\nn\n")
     core (-> program (assoc 0 2) ->core (assoc :input input))]
    ;(println input)
    ;(->> (:output (run core)) (map char) (apply str) println))
    (:output (run core))))

"
....................................#####......
....................................#...#......
....................................#...#......
....................................#...#......
#####.......................#############......
#...#.......................#.......#..........
#...#.......................#.......#..........
#...#.......................#.......#..........
#############.............#####.....#..........
....#.......#.............#.#.#.....#..........
....#.......#.............#.#.#.###########....
....#.......#.............#.#.#.#...#.....#....
....#.......#.............#.#.#######.....#....
....#.......#.............#.#...#.........#....
....#...#####.............#.#######.......#....
....#...#.................#.....#.#.......#....
....#############.........#.#####.#.......#....
........#.......#.........#.#.....#.......#....
........############^.....#.#.....#############
................#.........#.#.............#...#
............#####.....#####.#.............#...#
............#.........#.....#.............#...#
............#.........#.....#.............#####
............#.........#.....#..................
............#.....#######...#..................
............#.........#.#...#..................
............###########.#...#..................
........................#...#..................
........................#####..................
"

"
L,12,R,4,R,4,L,6,L,12,R,4,R,4,R,12,L,12,R,4,R,4,L,6,L,10,L,6,R,4,L,12,R,4,R,4,L,6,L,12,R,4,R,4,R,12,L,10,L,6,R,4,L,12,R,4,R,4,R,12,L,10,L,6,R,4,L,12,R,4,R,4,L,6
"

"
A,B,A,C,A,B,C,B,C,A
L,12,R,4,R,4,L,6
L,12,R,4,R,4,R,12
L,10,L,6,R,4
"
